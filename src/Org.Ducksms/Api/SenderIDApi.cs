/* 
 * Ducksms
 *
 * Ducksms is a leading SMS messaging service provider offering one-way SMS communication services from your internet enabled computer. The API allow you to directly communicate and manage a SMS with our SMS gateway system.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.Ducksms.Client;
using Org.Ducksms.Model;

namespace Org.Ducksms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISenderIDApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Sender ID
        /// </summary>
        /// <remarks>
        /// Create a new sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>CreatedSender</returns>
        CreatedSender CreateSender (Sender sender = default(Sender));

        /// <summary>
        /// Create a Sender ID
        /// </summary>
        /// <remarks>
        /// Create a new sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>ApiResponse of CreatedSender</returns>
        ApiResponse<CreatedSender> CreateSenderWithHttpInfo (Sender sender = default(Sender));
        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// Delete an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeletedSender</returns>
        DeletedSender DeleteSender (string id);

        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// Delete an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeletedSender</returns>
        ApiResponse<DeletedSender> DeleteSenderWithHttpInfo (string id);
        /// <summary>
        /// Get a single Sender ID
        /// </summary>
        /// <remarks>
        /// Get details on a single sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSender</returns>
        GetSender GetSender (string id);

        /// <summary>
        /// Get a single Sender ID
        /// </summary>
        /// <remarks>
        /// Get details on a single sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSender</returns>
        ApiResponse<GetSender> GetSenderWithHttpInfo (string id);
        /// <summary>
        /// List Sender ID
        /// </summary>
        /// <remarks>
        /// List all the senders
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>ListSender</returns>
        ListSender ListSender (int? page = default(int?), string filterName = default(string), string filterStatus = default(string));

        /// <summary>
        /// List Sender ID
        /// </summary>
        /// <remarks>
        /// List all the senders
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>ApiResponse of ListSender</returns>
        ApiResponse<ListSender> ListSenderWithHttpInfo (int? page = default(int?), string filterName = default(string), string filterStatus = default(string));
        /// <summary>
        /// Update a Sender ID
        /// </summary>
        /// <remarks>
        /// Update an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>UpdatedSender</returns>
        UpdatedSender UpdateSender (string id, Sender sender = default(Sender));

        /// <summary>
        /// Update a Sender ID
        /// </summary>
        /// <remarks>
        /// Update an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>ApiResponse of UpdatedSender</returns>
        ApiResponse<UpdatedSender> UpdateSenderWithHttpInfo (string id, Sender sender = default(Sender));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Sender ID
        /// </summary>
        /// <remarks>
        /// Create a new sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>Task of CreatedSender</returns>
        System.Threading.Tasks.Task<CreatedSender> CreateSenderAsync (Sender sender = default(Sender));

        /// <summary>
        /// Create a Sender ID
        /// </summary>
        /// <remarks>
        /// Create a new sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>Task of ApiResponse (CreatedSender)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedSender>> CreateSenderAsyncWithHttpInfo (Sender sender = default(Sender));
        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// Delete an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeletedSender</returns>
        System.Threading.Tasks.Task<DeletedSender> DeleteSenderAsync (string id);

        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// Delete an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeletedSender)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedSender>> DeleteSenderAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a single Sender ID
        /// </summary>
        /// <remarks>
        /// Get details on a single sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSender</returns>
        System.Threading.Tasks.Task<GetSender> GetSenderAsync (string id);

        /// <summary>
        /// Get a single Sender ID
        /// </summary>
        /// <remarks>
        /// Get details on a single sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSender)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSender>> GetSenderAsyncWithHttpInfo (string id);
        /// <summary>
        /// List Sender ID
        /// </summary>
        /// <remarks>
        /// List all the senders
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>Task of ListSender</returns>
        System.Threading.Tasks.Task<ListSender> ListSenderAsync (int? page = default(int?), string filterName = default(string), string filterStatus = default(string));

        /// <summary>
        /// List Sender ID
        /// </summary>
        /// <remarks>
        /// List all the senders
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>Task of ApiResponse (ListSender)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSender>> ListSenderAsyncWithHttpInfo (int? page = default(int?), string filterName = default(string), string filterStatus = default(string));
        /// <summary>
        /// Update a Sender ID
        /// </summary>
        /// <remarks>
        /// Update an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>Task of UpdatedSender</returns>
        System.Threading.Tasks.Task<UpdatedSender> UpdateSenderAsync (string id, Sender sender = default(Sender));

        /// <summary>
        /// Update a Sender ID
        /// </summary>
        /// <remarks>
        /// Update an existing sender id
        /// </remarks>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedSender)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedSender>> UpdateSenderAsyncWithHttpInfo (string id, Sender sender = default(Sender));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SenderIDApi : ISenderIDApi
    {
        private Org.Ducksms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIDApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SenderIDApi(String basePath)
        {
            this.Configuration = new Org.Ducksms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.Ducksms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIDApi"/> class
        /// </summary>
        /// <returns></returns>
        public SenderIDApi()
        {
            this.Configuration = Org.Ducksms.Client.Configuration.Default;

            ExceptionFactory = Org.Ducksms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIDApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SenderIDApi(Org.Ducksms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.Ducksms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.Ducksms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.Ducksms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.Ducksms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Sender ID Create a new sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>CreatedSender</returns>
        public CreatedSender CreateSender (Sender sender = default(Sender))
        {
             ApiResponse<CreatedSender> localVarResponse = CreateSenderWithHttpInfo(sender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Sender ID Create a new sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>ApiResponse of CreatedSender</returns>
        public ApiResponse<CreatedSender> CreateSenderWithHttpInfo (Sender sender = default(Sender))
        {

            var localVarPath = "/api/v1/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (BearerToken) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedSender)));
        }

        /// <summary>
        /// Create a Sender ID Create a new sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>Task of CreatedSender</returns>
        public async System.Threading.Tasks.Task<CreatedSender> CreateSenderAsync (Sender sender = default(Sender))
        {
             ApiResponse<CreatedSender> localVarResponse = await CreateSenderAsyncWithHttpInfo(sender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Sender ID Create a new sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">Create a new sender (optional)</param>
        /// <returns>Task of ApiResponse (CreatedSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedSender>> CreateSenderAsyncWithHttpInfo (Sender sender = default(Sender))
        {

            var localVarPath = "/api/v1/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (BearerToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedSender)));
        }

        /// <summary>
        /// Delete a Sender ID Delete an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeletedSender</returns>
        public DeletedSender DeleteSender (string id)
        {
             ApiResponse<DeletedSender> localVarResponse = DeleteSenderWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Sender ID Delete an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeletedSender</returns>
        public ApiResponse<DeletedSender> DeleteSenderWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->DeleteSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BearerToken) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedSender)));
        }

        /// <summary>
        /// Delete a Sender ID Delete an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeletedSender</returns>
        public async System.Threading.Tasks.Task<DeletedSender> DeleteSenderAsync (string id)
        {
             ApiResponse<DeletedSender> localVarResponse = await DeleteSenderAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Sender ID Delete an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeletedSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedSender>> DeleteSenderAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->DeleteSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BearerToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedSender)));
        }

        /// <summary>
        /// Get a single Sender ID Get details on a single sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSender</returns>
        public GetSender GetSender (string id)
        {
             ApiResponse<GetSender> localVarResponse = GetSenderWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Sender ID Get details on a single sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSender</returns>
        public ApiResponse<GetSender> GetSenderWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->GetSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BearerToken) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSender)));
        }

        /// <summary>
        /// Get a single Sender ID Get details on a single sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSender</returns>
        public async System.Threading.Tasks.Task<GetSender> GetSenderAsync (string id)
        {
             ApiResponse<GetSender> localVarResponse = await GetSenderAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Sender ID Get details on a single sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSender>> GetSenderAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->GetSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BearerToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSender)));
        }

        /// <summary>
        /// List Sender ID List all the senders
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>ListSender</returns>
        public ListSender ListSender (int? page = default(int?), string filterName = default(string), string filterStatus = default(string))
        {
             ApiResponse<ListSender> localVarResponse = ListSenderWithHttpInfo(page, filterName, filterStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Sender ID List all the senders
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>ApiResponse of ListSender</returns>
        public ApiResponse<ListSender> ListSenderWithHttpInfo (int? page = default(int?), string filterName = default(string), string filterStatus = default(string))
        {

            var localVarPath = "/api/v1/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[name]", filterName)); // query parameter
            if (filterStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[status]", filterStatus)); // query parameter

            // authentication (BearerToken) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSender)));
        }

        /// <summary>
        /// List Sender ID List all the senders
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>Task of ListSender</returns>
        public async System.Threading.Tasks.Task<ListSender> ListSenderAsync (int? page = default(int?), string filterName = default(string), string filterStatus = default(string))
        {
             ApiResponse<ListSender> localVarResponse = await ListSenderAsyncWithHttpInfo(page, filterName, filterStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Sender ID List all the senders
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional)</param>
        /// <param name="filterName">Filter by sender name (optional)</param>
        /// <param name="filterStatus">Filter by sender status (optional)</param>
        /// <returns>Task of ApiResponse (ListSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSender>> ListSenderAsyncWithHttpInfo (int? page = default(int?), string filterName = default(string), string filterStatus = default(string))
        {

            var localVarPath = "/api/v1/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[name]", filterName)); // query parameter
            if (filterStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[status]", filterStatus)); // query parameter

            // authentication (BearerToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSender)));
        }

        /// <summary>
        /// Update a Sender ID Update an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>UpdatedSender</returns>
        public UpdatedSender UpdateSender (string id, Sender sender = default(Sender))
        {
             ApiResponse<UpdatedSender> localVarResponse = UpdateSenderWithHttpInfo(id, sender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Sender ID Update an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>ApiResponse of UpdatedSender</returns>
        public ApiResponse<UpdatedSender> UpdateSenderWithHttpInfo (string id, Sender sender = default(Sender))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->UpdateSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (BearerToken) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedSender)));
        }

        /// <summary>
        /// Update a Sender ID Update an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>Task of UpdatedSender</returns>
        public async System.Threading.Tasks.Task<UpdatedSender> UpdateSenderAsync (string id, Sender sender = default(Sender))
        {
             ApiResponse<UpdatedSender> localVarResponse = await UpdateSenderAsyncWithHttpInfo(id, sender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Sender ID Update an existing sender id
        /// </summary>
        /// <exception cref="Org.Ducksms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sender">Update an existing sender id (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedSender>> UpdateSenderAsyncWithHttpInfo (string id, Sender sender = default(Sender))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SenderIDApi->UpdateSender");

            var localVarPath = "/api/v1/senders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (BearerToken) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatedSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedSender)));
        }

    }
}
