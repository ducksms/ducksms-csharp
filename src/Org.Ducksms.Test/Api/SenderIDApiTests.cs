/* 
 * Ducksms
 *
 * Ducksms is a leading SMS messaging service provider offering one-way SMS communication services from your internet enabled computer. The API allow you to directly communicate and manage a SMS with our SMS gateway system.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.Ducksms.Client;
using Org.Ducksms.Api;
using Org.Ducksms.Model;

namespace Org.Ducksms.Test
{
    /// <summary>
    ///  Class for testing SenderIDApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SenderIDApiTests
    {
        private SenderIDApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SenderIDApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SenderIDApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SenderIDApi
            //Assert.IsInstanceOf(typeof(SenderIDApi), instance);
        }

        
        /// <summary>
        /// Test CreateSender
        /// </summary>
        [Test]
        public void CreateSenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Sender sender = null;
            //var response = instance.CreateSender(sender);
            //Assert.IsInstanceOf(typeof(CreatedSender), response, "response is CreatedSender");
        }
        
        /// <summary>
        /// Test DeleteSender
        /// </summary>
        [Test]
        public void DeleteSenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteSender(id);
            //Assert.IsInstanceOf(typeof(DeletedSender), response, "response is DeletedSender");
        }
        
        /// <summary>
        /// Test GetSender
        /// </summary>
        [Test]
        public void GetSenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSender(id);
            //Assert.IsInstanceOf(typeof(GetSender), response, "response is GetSender");
        }
        
        /// <summary>
        /// Test ListSender
        /// </summary>
        [Test]
        public void ListSenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //string filterName = null;
            //string filterStatus = null;
            //var response = instance.ListSender(page, filterName, filterStatus);
            //Assert.IsInstanceOf(typeof(ListSender), response, "response is ListSender");
        }
        
        /// <summary>
        /// Test UpdateSender
        /// </summary>
        [Test]
        public void UpdateSenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Sender sender = null;
            //var response = instance.UpdateSender(id, sender);
            //Assert.IsInstanceOf(typeof(UpdatedSender), response, "response is UpdatedSender");
        }
        
    }

}
